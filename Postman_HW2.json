{
	"info": {
		"_postman_id": "4d577296-83a0-4a67-911c-30f5fe3125f3",
		"name": "Group_24_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "HW_2_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.eql(\"This is the first responce from server!\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}first",
					"host": [
						"{{url}}first"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_2_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var respData = pm.response.json();  // 3. Спарсить response body в json.",
							"",
							"pm.test(\"User name\", function () {  // 4.",
							"    pm.expect(respData.name).to.eql(\"Valentin\");",
							"});",
							"",
							"pm.test(\"User age\", function () {   // 5.",
							"    pm.expect(respData.age).to.eql(\"45\");",
							"});",
							"",
							"pm.test(\"User salary\", function () {    // 6.",
							"    pm.expect(respData.salary).to.eql(1000);",
							"});",
							"",
							"var reqData = request.data; // 7. Спарсить request.",
							"",
							"pm.test(\"User name\", function () {  // 8.",
							"    pm.expect(reqData.name).to.eql(\"Valentin\");",
							"});",
							"",
							"pm.test(\"User age\", function () {   // 9.",
							"    pm.expect(reqData.age).to.eql(\"45\");",
							"});",
							"",
							"pm.test(\"User salary\", function () {    // 10.",
							"    pm.expect(reqData.salary).to.eql(\"1000\");",
							"});",
							"",
							"console.log(respData.family); // 11. Вывести в консоль параметр family из response",
							"",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"",
							"pm.test(\"salary_1_5\", function () {",
							"    pm.expect(respData.family.u_salary_1_5_year).to.eql(reqData.salary * 4);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Valentin",
							"type": "text"
						},
						{
							"key": "age",
							"value": "45",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_3",
					"host": [
						"{{url}}user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_2_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var RespData = pm.response.json();  // 3. Спарсить response body в json",
							"",
							"var ReqData = pm.request.url.query.toObject();  //4. Спарсить request",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"test name\", function () {",
							"    pm.expect(RespData.name).to.eql(ReqData.name);",
							"});",
							"",
							"// 6 Проверить, что age в ответе равно age s request (age забрать из request.)",
							"",
							"pm.test(\"test age\", function () {",
							"    pm.expect(RespData.age).to.eql(ReqData.age);",
							"});",
							"",
							"// 7 Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"",
							"pm.test(\"test salary\", function () {",
							"    pm.expect(RespData.salary).to.eql(+ ReqData.salary);",
							"});",
							"",
							"// 8 Вывести в консоль параметр family из response",
							"",
							"console.log(RespData.family);",
							"",
							"// 9 Проверить, что у параметра dog есть параметры name",
							"",
							"pm.test(\"dog name\", function (){",
							"    pm.expect(RespData.family.pets.dog).to.have.property(\"name\");",
							"});",
							"",
							"// 10 Проверить, что у параметра dog есть параметры age",
							"",
							"pm.test(\"dog age\", function (){",
							"    pm.expect(RespData.family.pets.dog).to.have.property(\"age\");",
							"});",
							"",
							"// 11 Проверить, что параметр name имеет значение Luky",
							"",
							"pm.test(\"dog name Luky\", function (){",
							"    pm.expect(RespData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"",
							"// 12 Проверить, что параметр age имеет значение",
							"",
							"pm.test(\"age not null\", function (){",
							"    pm.expect(RespData.age).not.to.be.empty;",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}object_info_3?name=Valentin&age=45&salary=1000",
					"host": [
						"{{url}}object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Valentin"
						},
						{
							"key": "age",
							"value": "45"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_2_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 3 Спарсить response body в json",
							"",
							"var respData = pm.response.json();",
							"",
							"// 4 Спарсить request",
							"",
							"var reqData = pm.request.url.query.toObject();",
							"",
							"// 5 Проверить, что name в ответе равно name s request (name забрать из request",
							"",
							"pm.test(\"test name\", function(){",
							"    pm.expect(respData.name).to.eql(reqData.name);",
							"});",
							"",
							"// 6 Проверить, что age в ответе равно age из request (age забрать из request.)",
							"",
							"pm.test(\"test age\", function(){",
							"    pm.expect(respData.age).to.eql(+reqData.age);",
							"});",
							"",
							"// 7 Вывести в консоль параметр salary из request",
							"",
							"console.log(reqData.salary);",
							"",
							"// 8 Вывести в консоль параметр salary из response",
							"",
							"console.log(respData.salary);",
							"",
							"// 9 - [ ] Вывести в консоль 0-й элемент параметра salary из response.",
							"",
							"console.log(respData.salary[0]);",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"",
							"console.log(respData.salary[1]);",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"",
							"console.log(respData.salary[2]);",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"test salary 0\", function(){",
							"    pm.expect(respData.salary[0]).to.eql(+reqData.salary);",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"",
							"pm.test(\"test salary 1\", function(){",
							"    pm.expect(+respData.salary[1]).to.eql(reqData.salary*2);",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"",
							"pm.test(\"test salary 2\", function(){",
							"    pm.expect(+respData.salary[2]).to.eql(reqData.salary*3);",
							"});",
							"",
							"// 15. Создать в окружении переменную name",
							"// 16. Создать в окружении переменную age",
							"// 17. Создать в окружении переменную salary",
							"",
							"pm.environment.set(\"name\");",
							"pm.environment.set(\"age\");",
							"pm.environment.set(\"salary\");",
							"",
							"// 18. Передать в окружение переменную name",
							"// 19. Передать в окружение переменную age",
							"// 20. Передать в окружение переменную salary",
							"",
							"pm.environment.set(\"name\", respData.name);",
							"pm.environment.set(\"age\", respData.age);",
							"pm.environment.set(\"salary\", respData.salary[0]);",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary",
							"",
							"for (var i = 0; i < 3; i++) {",
							"    console.log(respData.salary[i]);",
							"};        ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}object_info_4?name=Valentin&age=45&salary=1000",
					"host": [
						"{{url}}object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Valentin"
						},
						{
							"key": "age",
							"value": "45"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "HW_2_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"//1. Вставить параметр salary из окружения в request",
							"//2. Вставить параметр age из окружения в age",
							"//3. Вставить параметр name из окружения в name",
							"//4. Отправить запрос.",
							"//5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//6. Спарсить response body в json.",
							"//7. Спарсить request.",
							"var respData = pm.response.json();",
							"var reqData = request.data;",
							"",
							"//8. Проверить, что json response имеет параметр start_qa_salary",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"//13. Проверить, что json response имеет параметр person",
							"",
							"pm.test(\"json response have start_qa_salary\", function(){",
							"    pm.expect(respData).to.have.property(\"start_qa_salary\");",
							"});",
							"",
							"pm.test(\"json response have qa_salary_after_6_months\", function(){",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"",
							"pm.test(\"json response have qa_salary_after_12_months\", function(){",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"",
							"pm.test(\"json response have qa_salary_after_1.5_year\", function(){",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"",
							"pm.test(\"json response have qa_salary_after_3.5_years\", function(){",
							"    pm.expect(respData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"",
							"pm.test(\"json response have person\", function(){",
							"    pm.expect(respData).to.have.property(\"person\");",
							"});",
							"",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"start_qa_salary равен salary из request\", function(){",
							"    pm.expect(respData.start_qa_salary).to.eql(+reqData.salary);",
							"});",
							"",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_6_months равен salary*2\", function(){",
							"    pm.expect(respData.qa_salary_after_6_months).to.eql(+reqData.salary*2);",
							"});",
							"",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_12_months равен salary*2.7\", function(){",
							"    pm.expect(respData.qa_salary_after_12_months).to.eql(+reqData.salary*2.7);",
							"});",
							"",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_1.5_year равен salary*3.3\", function(){",
							"    pm.expect(respData[\"qa_salary_after_1.5_year\"]).to.eql(+reqData.salary*3.3);",
							"});",
							"",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"qa_salary_after_3.5_years равен salary*3.8\", function(){",
							"    pm.expect(respData[\"qa_salary_after_3.5_years\"]).to.eql(+reqData.salary*3.8);",
							"});",
							"",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"1-й элемент из u_name равен salary из request\", function(){",
							"    pm.expect(respData.person.u_name[1]).to.eql(+reqData.salary);",
							"});",
							"",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"u_age равен age из request\", function(){",
							"    pm.expect(respData.person.u_age).to.eql(+reqData.age);",
							"});",
							"",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"u_salary_5_years равен salary*4.2 из request\", function(){",
							"    pm.expect(respData.person.u_salary_5_years).to.eql(+reqData.salary*4.2);",
							"});",
							"",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for (let propName in respData.person) {         // propName – имя свойства",
							"    console.log(propName);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}user_info_2",
					"host": [
						"{{url}}user_info_2"
					]
				}
			},
			"response": []
		}
	]
}
